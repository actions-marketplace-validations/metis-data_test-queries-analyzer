/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 838:
/***/ ((module) => {

module.exports = eval("require")("@actions/core");


/***/ }),

/***/ 766:
/***/ ((module) => {

module.exports = eval("require")("@actions/github");


/***/ }),

/***/ 952:
/***/ ((module) => {

module.exports = eval("require")("axios");


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = __dirname + "/";
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
const core = __nccwpck_require__(838);
const github = __nccwpck_require__(766);
const axios = __nccwpck_require__(952);
const { context } = __nccwpck_require__(766);
const octokit = github.getOctokit(core.getInput('github_token'));

const { pull_request } = context.payload;
const testName = pull_request?.title?.replace('#', '');

const commentPr = async () => {
  try {
    const urlPrefix = core.getInput('target_url') || `https://app.metisdata.io`;
    await octokit.rest.issues.createComment({
      ...context.repo,
      issue_number: pull_request.number,
      body: `Metis just analyzed the SQL commands generated by the test. View the results in the link: ${encodeURI(
        `${urlPrefix}/projects/${core.getInput('metis_api_key')}/test/${testName}`
      )}`,
    });
  } catch (error) {
    console.error(error);
    core.setFailed(error);
  }
};

const createNewTest = async () => {
  try {
    const urlPrefix = core.getInput('target_url') || `https://app.metisdata.io`;
    const res = await axios.post(`${urlPrefix}/api/tests/create`, {
      name: testName,
      apiKey: core.getInput('metis_api_key'),
    });
    console.log(res);
  } catch (error) {
    console.error(error);
    core.setFailed(error);
  }
};

try {
  const context = github.context;

  core.getInput('metis_api_key');
  const pullRequest = context.payload.pull_request;
  console.log(pullRequest.title);
  core.setOutput('pr_tag', pullRequest.title?.replace('#', '') || 'Action not trigger from pr');
  createNewTest();
  commentPr();
} catch (error) {
  console.error(error);
  core.setFailed(error);
}

})();

module.exports = __webpack_exports__;
/******/ })()
;